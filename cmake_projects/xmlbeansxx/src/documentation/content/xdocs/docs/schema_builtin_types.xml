<?xml version="1.0"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document> 
  <header> 
    <title>Introduction to Schema Built-in Types</title> 
    <notice></notice>
    <abstract>
    </abstract>
    <meta name="Keywords">xmlbeans,xmlbeans port to C++, XML, XML Schema, code generator, XML Manipulation, xmlbeansc, xmlbeans++ xmlbeansc++, xmlbeansxx, xmlbeanscxx</meta>
  </header> 

  <body> 
    <note>
      <strong>xmlbeansxx</strong> was inspired by <a href="http://xmlbeans.apache.org">Apache XMLBeans</a> (developed by
      <a href="http://www.apache.org">The Apache XML Project</a>). This document strongly based on
      <a href="http://xmlbeans.apache.org/docs/2.0.0/guide/conXMLBeansSupportBuiltInSchemaTypes.html">XMLBeans Support for Built-In Schema Types</a>.
    </note>
    
    <section>
      <title><strong>xmlbeansxx</strong> Support for Built-In Schema Types</title>
      <p>
        Just as with types in XML schema, and in <a href="http://xmlbeans.apache.org/">Apache XmlBeans</a>
	the <strong>xmlbeans</strong> types based on schema are arranged in a hierarchy. In general,
	the hierarchy of <strong>xmlbeansxx</strong> types mirrors the hierarchy of the schema types themselves.
	XML schema types all inherit from xs:anyType (which is at the root of the hierarchy);
	<strong>xmlbeansxx</strong> types inherit from XmlObject.
      </p>
      <p>
        In XML schema, xs:anyType is the root type for two type categories: built-in and user-derived.
	Built-in schema types are common types defined by the XML schema specification. User-derived
	types are those you define in your schema. This topic lists the built-in types provided with
	<strong>xmlbeansxx</strong>. For information about user-derived types and the C++ types generated
	from them, see <a href="generated_classes.html">C++ Types Generated from User-Derived Schema Types</a>.
      </p>
      <p>
        See <a href="http://xmlbeans.apache.org/docs/guide/conXMLBeansSupportBuiltInSchemaTypes.html">the figure</a>
	on Apache XmlBeans page, that illustrates the hierarchy of types, showing both built-in schema types and their
	XmlBeans parallels. Notice, too, that nearly all of the built-in types are also available as natural Java types.
	The hierarchy implemented in <strong>xmlbeansxx</strong> is exactly the same as in Apache XmlBeans. There is
	only one difference - Natural C++ Types are slightly different from those in Java version. But the
	hierarchy is the same.
      </p>
        <p>
	  As you can see from the figure on XmlBeans pages, all 46 built-in schema types are represented by
	  an XMLBean type provided with XmlBeans. The same functionality is provided by
	  <strong>xmlbeansxx</strong>.
	</p>
        <p>
	  When using built-in <strong>xmlbeansxx</strong> types, keep in mind that:
	</p>
	<ul>
	  <li>
	    Since XmlObject corresponds to the xs:anyType, all C++ <strong>xmlbeansxx</strong> types inherit from XmlObject.
  	    Therefore all <strong>xmlbeansxx</strong> types share the XmlObject interface's ability to create an XmlCursor
	    at the position of the object (this is not yet implemented). They can also render the XML
	    as strings or streams.
	  </li>
	  <li>
	    Where there is a corresponding natural C++ type, the <strong>xmlbeansxx</strong> type provides a way to get
	    the underlying XML's value as the natural type. See the table in this topic for information
	    on how natural C++ types map to <strong>xmlbeansxx</strong> types.
	  </li>
	  <li>
<!--	    Values assigned to built-in <strong>xmlbeansxx</strong> types are validated in keeping with the rules of
	    the schema type they represent during serialization. So, for example, an attempt to assign a negative
	    integer value to an XmlPositiveInteger will succeed, although during serialization - -->
	    Values assigned to built-in <strong>xmlbeansxx</strong> types are not validated in keeping with the rules of
	    the schema type they represent. To validate the document you should parse it again. Validation during
	    serialization or even during sets will be implemented in the future.
	  </li>
        </ul>
	<p>	  
	  The following table lists the built-in schema types, along with their <strong>xmlbeansxx</strong> and natural
	  C++ parallels. All <strong>xmlbeansxx</strong> types are in the xmlbeansxx namespace.
	</p>
    </section>


    <table>
      <caption>C++ Types Representing Built-In Schema Types</caption>
      <tr>
      <th>Built-in Schema Type</th>
      <th><strong>xmlbeansxx</strong> Type</th>
        <th>Natural C++ Type</th>
      </tr>
      <tr>
        <td>
	</td>
      </tr>
      <tr> <td>xs:anyType</td> <td>XmlObject</td> <td>xmlbeansxx::XmlObject</td> </tr>
      <tr> <td>xs:anySimpleType</td> <td>XmlAnySimpleType</td> <td>std::string</td> </tr>
      <tr> <td>xs:anyURI</td> <td>XmlAnyURI</td> <td>std::string</td> </tr>
      <tr> <td>xs:base64Binary</td> <td>XmlBase64Binary</td> <td>xmlbeansxx::shared_array&lt;unsigned char&gt;</td> </tr>
      <tr> <td>xs:boolean</td> <td>XmlBoolean</td> <td>bool</td> </tr>
      <tr> <td>xs:byte</td> <td>XmlByte</td> <td>unsigned char</td> </tr>
      <tr> <td>xs:date</td> <td>XmlDate</td> <td>boost::posix_time::ptime</td> </tr>
      <tr> <td>xs:dateTime</td> <td>XmlDateTime</td> <td>boost::posix_time::ptime</td> </tr>
      <tr> <td>xs:decimal</td> <td>XmlDecimal</td> <td>mpf_class</td> </tr>
      <tr> <td>xs:double</td> <td>XmlDouble</td> <td>double</td> </tr>
      <tr> <td>xs:duration</td> <td>XmlDuration</td> <td>boost::shared_ptr&lt;xmlbeansxx::GDuration&gt; (not implemented)</td> </tr>
      <tr> <td>xs:ENTITIES</td> <td>XmlENTITIES</td> <td>std::string</td> </tr>
      <tr> <td>xs:ENTITY</td> <td>XmlENTITY</td> <td>std::string</td> </tr>
      <tr> <td>xs:float</td> <td>XmlFloat</td> <td>float</td> </tr>
      <tr> <td>xs:gDay</td> <td>XmlGDay</td> <td>boost::posix_time::ptime</td> </tr>
      <tr> <td>xs:gMonth</td> <td>XmlGMonth</td> <td>boost::posix_time::ptime</td> </tr>
      <tr> <td>xs:gMonthDay</td> <td>XmlGMonthDay</td> <td>boost::posix_time::ptime</td> </tr>
      <tr> <td>xs:gYear</td> <td>XmlGYear</td> <td>boost::posix_time::ptime</td> </tr>
      <tr> <td>xs:gYearMonth</td> <td>XmlGYearMonth</td> <td>boost::posix_time::ptime</td> </tr>
      <tr> <td>xs:hexBinary</td> <td>XmlHexBinary</td> <td>xmlbeansxx::shared_array&lt;unsigned char&gt;</td> </tr>
      <tr> <td>xs:ID</td> <td>XmlID</td> <td>std::string</td> </tr>
      <tr> <td>xs:IDREF</td> <td>XmlIDREF</td> <td>std::string</td> </tr>
      <tr> <td>xs:IDREFS</td> <td>XmlIDREFS</td> <td>std::string</td> </tr>
      <tr> <td>xs:int</td> <td>XmlInt</td> <td>int</td> </tr>
      <tr> <td>xs:integer</td> <td>XmlInteger</td> <td>mpz_class</td> </tr>
      <tr> <td>xs:language</td> <td>XmlLanguage</td> <td>std::string</td> </tr>
      <tr> <td>xs:long</td> <td>XmlLong</td> <td>mpz_class</td> </tr>
      <tr> <td>xs:Name</td> <td>XmlName</td> <td>std::string</td> </tr>
      <tr> <td>xs:NCName</td> <td>XmlNCNAME</td> <td>std::string</td> </tr>
      <tr> <td>xs:negativeInteger</td> <td>XmlNegativeInteger</td> <td>mpz_class</td> </tr>
      <tr> <td>xs:NMTOKEN</td> <td>XmlNMTOKEN</td> <td>std::string</td> </tr>
      <tr> <td>xs:NMTOKENS</td> <td>XmlNMTOKENS</td> <td>std::string</td> </tr>
      <tr> <td>xs:nonNegativeInteger</td> <td>XmlNonNegativeInteger</td> <td>mpz_class</td> </tr>
      <tr> <td>xs:nonPositiveInteger</td> <td>XmlNonPositiveInteger</td> <td>mpz_class</td> </tr>
      <tr> <td>xs:normalizedString</td> <td>XmlNormalizedString</td> <td>std::string</td> </tr>
      <tr> <td>xs:NOTATION</td> <td>XmlNOTATION</td> <td>Not supported</td> </tr>
      <tr> <td>xs:positiveInteger</td> <td>XmlPositiveInteger</td> <td>mpz_class</td> </tr>
      <tr> <td>xs:QName</td> <td>XmlQName</td> <td>boost::shared_ptr&lt;xmlbeansxx::QName&gt; (not implemented)</td> </tr>
      <tr> <td>xs:short</td> <td>XmlShort</td> <td>short</td> </tr>
      <tr> <td>xs:string</td> <td>XmlString</td> <td>std::string</td> </tr>
      <tr> <td>xs:time</td> <td>XmlTime</td> <td>boost::posix_time::ptime</td> </tr>
      <tr> <td>xs:token</td> <td>XmlToken</td> <td>std::string</td> </tr>
      <tr> <td>xs:unsignedByte</td> <td>XmlUnsignedByte</td> <td>short</td> </tr>
      <tr> <td>xs:unsignedInt</td> <td>XmlUnsignedInt</td> <td>mpz_class</td> </tr>
      <tr> <td>xs:unsignedLong</td> <td>XmlUnsignedLong</td> <td>mpz_class</td> </tr>
      <tr> <td>xs:unsignedShort</td> <td>XmlUnsignedShort</td> <td>int</td> </tr>
    </table>
  </body> 

</document>
