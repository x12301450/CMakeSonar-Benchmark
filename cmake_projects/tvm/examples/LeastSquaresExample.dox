// Copyright 2017-2020 CNRS-AIST JRL and CNRS-UM LIRMM

/**
 * \page leastSquaresExample A least-squares problem example
 *
 * Preliminaries
 * =============
 *
 * This example assumes that the concepts presented in \ref problemWritingExample
 * are somewhat known, in that we will not describe all the details like the
 * creation of space and variables. It aims at showing a simpler case where one
 * want to directly write a constrained linear least-squares problem, without
 * relying on task dynamics and automatic linearization. It showcases the use of
 * tvm::utils::AffineExpr, which offers a symbolic-like way of writing linear
 * expressions.
 *
 * \image html staticForceEquilibrium.svg
 *
 * In this example we consider a simplified 3-limbs robot whose mass \f$ m \f$ is
 * concentrated at its Center of Mass (CoM). The kinematics of the limbs is
 * abstracted, and the robot is in ponctual contact with its environment at each
 * end of its limbs (see figure). At each contact point \f$ p_i \f$, the contact
 * force is \f$ f_i \f$ and the contact normal is \f$ n_i \f$.
 *
 * We would like to find the position \f$ c \f$ of the CoM and a set of forces
 * such that the robot is in static equilibrium. The forces should be as close as
 * possible to desired forces \f$ f_i^{des} \f$, and because this does not
 * completely specify the position of the CoM, we will also require the CoM to be
 * close to the contacts.
 *
 * This can be written as a linear least-squares problem:
 *
 * \f$
 *    \begin{align}
 *    \min_{f_i, c}. &\ \frac{1}{2} \sum_i \left\| f_i - f_i^{des} \right\|^2 + \frac{w}{2} \sum_i \left\| c - p_i \right\|^2\\
 *    \mbox{s.t.} &\ \sum_i R_i f_i + m g = 0 \\
 *                &\ \sum_i \widehat{p_i} R_i f_i + m \widehat{g} c = 0\\
 *                &\ C f_i \geq 0,\ i=1..3 \\
 *    \end{align}
 * \f$
 *
 * where \f$ w \f$ is a weight and \f$ R_i \f$ is a rotation matrix such that \f$ R_i z = n_i\f$ (with
 * \f$ z \f$ the vertical unit vector), i.e. a rotation matrix between the world
 * frame and a contact frame. \f$ \widehat{x} \f$ is the skew-symmetric matrix
 * such that for any \f$ u \f$, \f$ \widehat{x} u = x \times u \f$ (cross
 * product). \f$ C \f$ is a matrix expressing the linearized Coulomb friction cone
 * (see e.g. [here](https://scaron.info/teaching/friction-cones.html)).
 * The two equality constraints are the Newton-Euler equations where the moments
 * are taken at the origin of the world frames. The forces \f$ f_i \f$ are
 * expressed in the local contact frame and brought back in the world frame through
 * the \f$ R_i \f$.
 *
 * Note that
 *
 * \f$
 *    \frac{1}{2} \sum_i \left\| f_i - f_i^{des} \right\|^2 + \frac{w}{2} \sum_i \left\| c - p_i \right\|^2 = \frac{1}{2}\left\| \begin{bmatrix} f_1 - f_1^{des} \\ f_2 - f_2^{des} \\ \vdots \\ c - p_1 \\ c - p_2 \\ \vdots \end{bmatrix} \right\|^2_W
 * \f$
 * where \f$ W \f$ is a diagonal matrix with \p 1 and \p w on the diagonal.
 *
 * Implementation outline
 * ======================
 *
 * Our main function will be \c leastSquares3points, and consist of 3 main steps
 *  1. Declaration of the problem data and variables
 *  2. Writing of the problem
 *  3. Solving of the problem
 *
 * We will use three helper functions
 *  * <code>Matrix3d rotationFromZ(Vector3d v)</code>, which creates a rotation
 *    matrix \c R such that <code> R*Vector3d::UnitZ() == v </code>
 *  * <code>Matrix3d hat(const Vector3d& v)</code>, which returns the skew-
 *    symmetric matrix \f$ \widehat{v} \f$ as described above
 *  * <code>MatrixXd discretizedFrictionCone(double mu)</code>, which creates the
 *    matrix \f$ C \f$ for a four-sided linearized cone with friction coefficient
 *    \c mu.
 *
 * We won't details these methods further.
 *
 *
 * Implementation details
 * ======================
 * Given a 3-dimensionnal space <code>Space S(3)</code>, we create the following
 * data for the first contact point:
 * \dontinclude LeastSquaresExample.cpp
 * \skipline Data
 * \until Variable creation
 * Here we chose to set the desired force to 0, which will have the effect of
 * trying to minimize the force.
 *
 * The same is done for the second and third contact points.
 *
 * Next, we create the data about the weight and CoM:
 * \skipline const
 * \until VariablePtr
 * and define a matrix for the friction cone (we use the same 0.6 friction
 * coefficient for all contacts):
 * \skipline discretizedFrictionCone
 *
 * tvm::LinearizedControlProblem can be used to write linear least-squares
 * problem, with a method \c add that forgoes the need for task dynamics.
 * After creating an instance \c pb, we can populate it.
 *
 * First we add the Newton-Euler equations as constraints (priority level 0):
 * \skipline Newton
 * \until Euler
 * Since these are linear expression, we can write them directly. TVM is
 * providing, with the implicit use of the tvm::utils::AffineExpr class and
 * operator overload, a way to write such expressions in a symbolic-like way.
 *
 * Then the friction constraints can be added in the same way
 * \skipline f1
 * \until f3
 *
 * Finally the objectives are added (priority level 1):
 * \skipline f1
 * \until p3
 * We use the weight \f$ w = 10^{-4} \f$.
 *
 * Note that, by default, constraints at any level are to be solved in the least-
 * square sense, so that \f$ f_i = f_i^{des} \f$ becomes \f$ \left\| f_i - f_i^{des} \right\| \f$.
 *
 * The last thing to do is to chose a resolution scheme and solve the problem:
 * \skipline Creating
 * \until solve(pb)
 *
 * Example file
 * ------------
 * [example/LeastSquaresExample.cpp](https://github.com/jrl-umi3218/tvm/blob/master/examples/LeastSquaresExample.cpp)
 *
 */
