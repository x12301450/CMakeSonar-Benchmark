//////////////////////////////////////////////////////////
//   This class has been generated by TFile::MakeProject
//     (Mon Apr 18 12:01:55 2005 by ROOT version 4.03/05)
//      from the StreamerInfo in file jskim_00x.root
//////////////////////////////////////////////////////////


#ifndef HoldBpsi_h
#define HoldBpsi_h

#include "TObject.h"

class HoldPvx : public TObject {

public:
   Int_t       ntrk;         //
   Float_t     x;            //
   Float_t     y;            //
   Float_t     z;            //

   HoldPvx() {};
   virtual ~HoldPvx() {};

   ClassDef(HoldPvx,1) //
};

class HoldPtl : public TObject {

public:
   Int_t       nCFT;         //
   Int_t       nSMT;         //
   Int_t       chg;          //
   Int_t       isMuon;       //
   Float_t     ndf;          //
   Float_t     chi2ndf;      //
   Float_t     ipsig;        //sqrt of Guennadi's  "chi2Vrt"
   Float_t     ptot;         //
   Float_t     pt;           //
   Float_t     eta;          //
   Float_t     phi;          //

   HoldPtl() {};
   virtual ~HoldPtl() {};

   ClassDef(HoldPtl,1) //
};

class HoldDvx : public TObject {

public:
   Float_t     chi2;         //
   Float_t     cxy;          //pointing cosine
   Float_t     dxy;          //decay length axial, signed
   Float_t     vxy;          //error > 0    sxy = dxy/sxy
   Float_t     sxy;          //decay length significance, axial, signed

   HoldDvx() {};
   virtual ~HoldDvx() {};

   ClassDef(HoldDvx,1) //
};

class HoldBpsi 
: public TObject
{

public:
   Int_t       mcjpsi;       //=1 if matching MCjpsi, 0 otherwise
   Int_t       mcptl3;       //=1 if matching MCpion, 0 otherwise
   Int_t       sjet;         //three ptcles in same Durham jet (see code)
   Int_t       spvx;         //three ptcles in same PrimVertex (see code)
   Float_t     ptrelj;       //jpsi w.r.to Bparent
   Float_t     ptrel3;       //ptl3 w.r.to Bparent
   Float_t     deltaR;       //sqrt(deta**2 + dphi**2)
   Float_t     cos3D;        //cos( p(jpsi), p(ptl3) )
   Float_t     ctau;         //transv.ctau = 2D(xy)
   Float_t     ctaujpi;      //transv ctau, 2D(xy)
   Float_t     ctaujk;       //
   Float_t     mjpsi;        //
   Float_t     umjpi;        //w/out Jpsi mass constraint
   Float_t     umjk;         //
   Float_t     mjpi;         //with Jpsi mass constraint
   Float_t     mjk;          //
   HoldPtl     ptl3;         //
   HoldPtl     jtrk;         //
   HoldPvx     pvx;          //
   HoldDvx     dvx;          //

   HoldBpsi() {};
   virtual ~HoldBpsi() {};

   ClassDef(HoldBpsi,2) //
};
#endif
