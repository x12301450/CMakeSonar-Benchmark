// Test Pi blocks with braces in Rho language

// Simple Pi block with an assert ion
pi { 1 1 + 2 == assert }

// Store the result of a Pi operation in a variable
x = pi { 5 3 + }

// Use the stored result
assert x == 8

// Use Pi block in a condition
if (pi { 1 1 + 2 == }) {
    // This should execute
    y = 42
}

// Create a function that uses Pi blocks
use_pi = fun(a, b) {
    return pi { a b + }
}

// Test the function
result = use_pi(10, 20)
assert result == 30

// Test more complex Pi operations
z = pi { 
    5 2 *     // Push 10
    3 3 +     // Push 6
    +         // Add them: 16
}
assert z == 16

// Nested Pi blocks should work too
nested = pi {
    2 3 *     // Push 6
    pi { 1 2 + } // Push 3
    +         // Add them: 9
}
assert nested == 9

// Test using Rho variables inside Pi blocks
a = 5
b = 7
c = pi { a b + }
assert c == 12

// Test assert ion with expression
pi { 1 1 + 2 == assert }

// Test failing assert ion - should throw an exception
// Uncomment to test: pi { 1 1 + 3 == assert }