// Advanced Rho operations test script

// Arithmetic precedence tests
result1 = 2 + 3 * 4;           // 14
result2 = (2 + 3) * 4;         // 20
result3 = 8 - 2 * 3;           // 2
result4 = (8 - 2) * 3;         // 18

// Mixed type operations
float_result1 = 2 + 3.5;       // 5.5
float_result2 = 2.5 * 4;       // 10.0
float_result3 = 10 / 2.5;      // 4.0
float_result4 = 10.5 - 3;      // 7.5

// Complex expressions
complex1 = 2 + 3 * 4 - 6 / 2;  // 11
complex2 = (2 + 3) * (4 - 2);  // 10
complex3 = 8 - 4 + 2 * 5;      // 14

// Modulus operations
mod1 = 10 % 3;                 // 1
mod2 = 20 % 7;                 // 6
mod3 = 100 % 10;               // 0
mod4 = 7 % 10;                 // 7

// Bitwise operations
bit1 = 5 & 3;                  // 1 (101 & 011 = 001)
bit2 = 5 | 3;                  // 7 (101 | 011 = 111)
bit3 = 5 ^ 3;                  // 6 (101 ^ 011 = 110)
bit4 = 1 << 3;                 // 8 (1 << 3 = 1000)
bit5 = 8 >> 2;                 // 2 (1000 >> 2 = 10)

// Boolean operations
bool1 = true && true;          // true
bool2 = true && false;         // false
bool3 = true || false;         // true
bool4 = false || false;        // false
bool5 = !true;                 // false
bool6 = !false;                // true
bool7 = !(true && false);      // true

// Comparison operations
comp1 = 5 > 3;                 // true
comp2 = 3 > 5;                 // false
comp3 = 5 < 3;                 // false
comp4 = 3 < 5;                 // true
comp5 = 5 >= 5;                // true
comp6 = 5 <= 5;                // true
comp7 = 5 == 5;                // true
comp8 = 5 != 5;                // false

// Mixed boolean and comparison
mix1 = 5 > 3 && 7 < 10;        // true
mix2 = 5 > 3 && 7 > 10;        // false
mix3 = 5 < 3 || 7 < 10;        // true
mix4 = 5 < 3 || 7 > 10;        // false

// String operations
str1 = "Hello" + " " + "World"; // "Hello World"
str2 = "abc" == "abc";          // true
str3 = "abc" != "def";          // true
str4 = "abc" < "def";           // true

// Functions
add = fun(a, b)
    return a + b

multiply = fun(a, b)
    return a * b

factorial = fun(n)
    if n <= 1
        return 1
    else
        return n * factorial(n-1)

fibonacci = fun(n)
    if n <= 1
        return n
    else
        return fibonacci(n-1) + fibonacci(n-2)

// Test function calls
result_add = add(5, 3);                 // 8
result_multiply = multiply(4, 7);       // 28
result_factorial = factorial(5);        // 120
result_fibonacci = fibonacci(7);        // 13
result_nested = add(multiply(2, 3), 4); // 10

// Testing variables and scope
global_var = 10;

test_scope = fun()
    local_var = 20
    global_var = global_var + 5
    return local_var + global_var

result_scope = test_scope();  // 35 (20 + 15)